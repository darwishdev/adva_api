// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/darwishdev/bzns_pro_api/common/db/gen (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	connect "github.com/bufbuild/connect-go"
	db "github.com/darwishdev/bzns_pro_api/common/db/gen"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BlogCreate mocks base method.
func (m *MockStore) BlogCreate(arg0 context.Context, arg1 db.BlogCreateParams) (db.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogCreate indicates an expected call of BlogCreate.
func (mr *MockStoreMockRecorder) BlogCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogCreate", reflect.TypeOf((*MockStore)(nil).BlogCreate), arg0, arg1)
}

// BlogDeleteRestore mocks base method.
func (m *MockStore) BlogDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlogDeleteRestore indicates an expected call of BlogDeleteRestore.
func (mr *MockStoreMockRecorder) BlogDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogDeleteRestore", reflect.TypeOf((*MockStore)(nil).BlogDeleteRestore), arg0, arg1)
}

// BlogFindForUpdate mocks base method.
func (m *MockStore) BlogFindForUpdate(arg0 context.Context, arg1 int32) (db.BlogFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.BlogFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogFindForUpdate indicates an expected call of BlogFindForUpdate.
func (mr *MockStoreMockRecorder) BlogFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogFindForUpdate", reflect.TypeOf((*MockStore)(nil).BlogFindForUpdate), arg0, arg1)
}

// BlogUpdate mocks base method.
func (m *MockStore) BlogUpdate(arg0 context.Context, arg1 db.BlogUpdateParams) (db.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogUpdate indicates an expected call of BlogUpdate.
func (mr *MockStoreMockRecorder) BlogUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogUpdate", reflect.TypeOf((*MockStore)(nil).BlogUpdate), arg0, arg1)
}

// BlogsList mocks base method.
func (m *MockStore) BlogsList(arg0 context.Context) ([]db.BlogsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogsList", arg0)
	ret0, _ := ret[0].([]db.BlogsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogsList indicates an expected call of BlogsList.
func (mr *MockStoreMockRecorder) BlogsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogsList", reflect.TypeOf((*MockStore)(nil).BlogsList), arg0)
}

// CategoriesInputList mocks base method.
func (m *MockStore) CategoriesInputList(arg0 context.Context, arg1 interface{}) ([]db.CategoriesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoriesInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.CategoriesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoriesInputList indicates an expected call of CategoriesInputList.
func (mr *MockStoreMockRecorder) CategoriesInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoriesInputList", reflect.TypeOf((*MockStore)(nil).CategoriesInputList), arg0, arg1)
}

// CategoriesList mocks base method.
func (m *MockStore) CategoriesList(arg0 context.Context, arg1 interface{}) ([]db.CategoriesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoriesList", arg0, arg1)
	ret0, _ := ret[0].([]db.CategoriesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoriesList indicates an expected call of CategoriesList.
func (mr *MockStoreMockRecorder) CategoriesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoriesList", reflect.TypeOf((*MockStore)(nil).CategoriesList), arg0, arg1)
}

// CategoryCreate mocks base method.
func (m *MockStore) CategoryCreate(arg0 context.Context, arg1 db.CategoryCreateParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryCreate indicates an expected call of CategoryCreate.
func (mr *MockStoreMockRecorder) CategoryCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryCreate", reflect.TypeOf((*MockStore)(nil).CategoryCreate), arg0, arg1)
}

// CategoryDeleteRestore mocks base method.
func (m *MockStore) CategoryDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CategoryDeleteRestore indicates an expected call of CategoryDeleteRestore.
func (mr *MockStoreMockRecorder) CategoryDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryDeleteRestore", reflect.TypeOf((*MockStore)(nil).CategoryDeleteRestore), arg0, arg1)
}

// CategoryFind mocks base method.
func (m *MockStore) CategoryFind(arg0 context.Context, arg1 int32) (db.CategoryFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryFind", arg0, arg1)
	ret0, _ := ret[0].(db.CategoryFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryFind indicates an expected call of CategoryFind.
func (mr *MockStoreMockRecorder) CategoryFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryFind", reflect.TypeOf((*MockStore)(nil).CategoryFind), arg0, arg1)
}

// CategoryFindForUpdate mocks base method.
func (m *MockStore) CategoryFindForUpdate(arg0 context.Context, arg1 int32) (db.CategoryFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CategoryFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryFindForUpdate indicates an expected call of CategoryFindForUpdate.
func (mr *MockStoreMockRecorder) CategoryFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryFindForUpdate", reflect.TypeOf((*MockStore)(nil).CategoryFindForUpdate), arg0, arg1)
}

// CategoryUpdate mocks base method.
func (m *MockStore) CategoryUpdate(arg0 context.Context, arg1 db.CategoryUpdateParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryUpdate indicates an expected call of CategoryUpdate.
func (mr *MockStoreMockRecorder) CategoryUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryUpdate", reflect.TypeOf((*MockStore)(nil).CategoryUpdate), arg0, arg1)
}

// CitiesInputList mocks base method.
func (m *MockStore) CitiesInputList(arg0 context.Context) ([]db.CitiesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CitiesInputList", arg0)
	ret0, _ := ret[0].([]db.CitiesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CitiesInputList indicates an expected call of CitiesInputList.
func (mr *MockStoreMockRecorder) CitiesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CitiesInputList", reflect.TypeOf((*MockStore)(nil).CitiesInputList), arg0)
}

// CitiesList mocks base method.
func (m *MockStore) CitiesList(arg0 context.Context) ([]db.CitiesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CitiesList", arg0)
	ret0, _ := ret[0].([]db.CitiesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CitiesList indicates an expected call of CitiesList.
func (mr *MockStoreMockRecorder) CitiesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CitiesList", reflect.TypeOf((*MockStore)(nil).CitiesList), arg0)
}

// CityCreate mocks base method.
func (m *MockStore) CityCreate(arg0 context.Context, arg1 db.CityCreateParams) (db.PlacesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PlacesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityCreate indicates an expected call of CityCreate.
func (mr *MockStoreMockRecorder) CityCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityCreate", reflect.TypeOf((*MockStore)(nil).CityCreate), arg0, arg1)
}

// CityDeleteRestore mocks base method.
func (m *MockStore) CityDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CityDeleteRestore indicates an expected call of CityDeleteRestore.
func (mr *MockStoreMockRecorder) CityDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityDeleteRestore", reflect.TypeOf((*MockStore)(nil).CityDeleteRestore), arg0, arg1)
}

// CityFindForUpdate mocks base method.
func (m *MockStore) CityFindForUpdate(arg0 context.Context, arg1 int32) (db.CityFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CityFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityFindForUpdate indicates an expected call of CityFindForUpdate.
func (mr *MockStoreMockRecorder) CityFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityFindForUpdate", reflect.TypeOf((*MockStore)(nil).CityFindForUpdate), arg0, arg1)
}

// CityUpdate mocks base method.
func (m *MockStore) CityUpdate(arg0 context.Context, arg1 db.CityUpdateParams) (db.PlacesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PlacesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityUpdate indicates an expected call of CityUpdate.
func (mr *MockStoreMockRecorder) CityUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityUpdate", reflect.TypeOf((*MockStore)(nil).CityUpdate), arg0, arg1)
}

// DbErrorParser mocks base method.
func (m *MockStore) DbErrorParser(arg0 error, arg1 map[string]string) *connect.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbErrorParser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Error)
	return ret0
}

// DbErrorParser indicates an expected call of DbErrorParser.
func (mr *MockStoreMockRecorder) DbErrorParser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbErrorParser", reflect.TypeOf((*MockStore)(nil).DbErrorParser), arg0, arg1)
}

// DistrictCreate mocks base method.
func (m *MockStore) DistrictCreate(arg0 context.Context, arg1 db.DistrictCreateParams) (db.PlacesSchemaDistrict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistrictCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PlacesSchemaDistrict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistrictCreate indicates an expected call of DistrictCreate.
func (mr *MockStoreMockRecorder) DistrictCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistrictCreate", reflect.TypeOf((*MockStore)(nil).DistrictCreate), arg0, arg1)
}

// DistrictDeleteRestore mocks base method.
func (m *MockStore) DistrictDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistrictDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistrictDeleteRestore indicates an expected call of DistrictDeleteRestore.
func (mr *MockStoreMockRecorder) DistrictDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistrictDeleteRestore", reflect.TypeOf((*MockStore)(nil).DistrictDeleteRestore), arg0, arg1)
}

// DistrictFindForUpdate mocks base method.
func (m *MockStore) DistrictFindForUpdate(arg0 context.Context, arg1 int32) (db.DistrictFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistrictFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.DistrictFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistrictFindForUpdate indicates an expected call of DistrictFindForUpdate.
func (mr *MockStoreMockRecorder) DistrictFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistrictFindForUpdate", reflect.TypeOf((*MockStore)(nil).DistrictFindForUpdate), arg0, arg1)
}

// DistrictUpdate mocks base method.
func (m *MockStore) DistrictUpdate(arg0 context.Context, arg1 db.DistrictUpdateParams) (db.PlacesSchemaDistrict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistrictUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PlacesSchemaDistrict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistrictUpdate indicates an expected call of DistrictUpdate.
func (mr *MockStoreMockRecorder) DistrictUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistrictUpdate", reflect.TypeOf((*MockStore)(nil).DistrictUpdate), arg0, arg1)
}

// DistrictsInputList mocks base method.
func (m *MockStore) DistrictsInputList(arg0 context.Context, arg1 int32) ([]db.DistrictsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistrictsInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.DistrictsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistrictsInputList indicates an expected call of DistrictsInputList.
func (mr *MockStoreMockRecorder) DistrictsInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistrictsInputList", reflect.TypeOf((*MockStore)(nil).DistrictsInputList), arg0, arg1)
}

// DistrictsList mocks base method.
func (m *MockStore) DistrictsList(arg0 context.Context) ([]db.DistrictsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistrictsList", arg0)
	ret0, _ := ret[0].([]db.DistrictsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistrictsList indicates an expected call of DistrictsList.
func (mr *MockStoreMockRecorder) DistrictsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistrictsList", reflect.TypeOf((*MockStore)(nil).DistrictsList), arg0)
}

// EventCreate mocks base method.
func (m *MockStore) EventCreate(arg0 context.Context, arg1 db.EventCreateParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventCreate indicates an expected call of EventCreate.
func (mr *MockStoreMockRecorder) EventCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCreate", reflect.TypeOf((*MockStore)(nil).EventCreate), arg0, arg1)
}

// EventDeleteRestore mocks base method.
func (m *MockStore) EventDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventDeleteRestore indicates an expected call of EventDeleteRestore.
func (mr *MockStoreMockRecorder) EventDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventDeleteRestore", reflect.TypeOf((*MockStore)(nil).EventDeleteRestore), arg0, arg1)
}

// EventFind mocks base method.
func (m *MockStore) EventFind(arg0 context.Context, arg1 int32) (db.EventFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventFind", arg0, arg1)
	ret0, _ := ret[0].(db.EventFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventFind indicates an expected call of EventFind.
func (mr *MockStoreMockRecorder) EventFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventFind", reflect.TypeOf((*MockStore)(nil).EventFind), arg0, arg1)
}

// EventFindForUpdate mocks base method.
func (m *MockStore) EventFindForUpdate(arg0 context.Context, arg1 int32) (db.EventFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.EventFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventFindForUpdate indicates an expected call of EventFindForUpdate.
func (mr *MockStoreMockRecorder) EventFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventFindForUpdate", reflect.TypeOf((*MockStore)(nil).EventFindForUpdate), arg0, arg1)
}

// EventRequestCreate mocks base method.
func (m *MockStore) EventRequestCreate(arg0 context.Context, arg1 db.EventRequestCreateParams) (db.EventRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRequestCreate", arg0, arg1)
	ret0, _ := ret[0].(db.EventRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventRequestCreate indicates an expected call of EventRequestCreate.
func (mr *MockStoreMockRecorder) EventRequestCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRequestCreate", reflect.TypeOf((*MockStore)(nil).EventRequestCreate), arg0, arg1)
}

// EventRequestDeleteRestore mocks base method.
func (m *MockStore) EventRequestDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRequestDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventRequestDeleteRestore indicates an expected call of EventRequestDeleteRestore.
func (mr *MockStoreMockRecorder) EventRequestDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRequestDeleteRestore", reflect.TypeOf((*MockStore)(nil).EventRequestDeleteRestore), arg0, arg1)
}

// EventRequestUpdate mocks base method.
func (m *MockStore) EventRequestUpdate(arg0 context.Context, arg1 db.EventRequestUpdateParams) (db.EventRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRequestUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.EventRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventRequestUpdate indicates an expected call of EventRequestUpdate.
func (mr *MockStoreMockRecorder) EventRequestUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRequestUpdate", reflect.TypeOf((*MockStore)(nil).EventRequestUpdate), arg0, arg1)
}

// EventRequestsList mocks base method.
func (m *MockStore) EventRequestsList(arg0 context.Context) ([]db.EventRequestsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRequestsList", arg0)
	ret0, _ := ret[0].([]db.EventRequestsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventRequestsList indicates an expected call of EventRequestsList.
func (mr *MockStoreMockRecorder) EventRequestsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRequestsList", reflect.TypeOf((*MockStore)(nil).EventRequestsList), arg0)
}

// EventUpdate mocks base method.
func (m *MockStore) EventUpdate(arg0 context.Context, arg1 db.EventUpdateParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventUpdate indicates an expected call of EventUpdate.
func (mr *MockStoreMockRecorder) EventUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventUpdate", reflect.TypeOf((*MockStore)(nil).EventUpdate), arg0, arg1)
}

// EventsInputList mocks base method.
func (m *MockStore) EventsInputList(arg0 context.Context) ([]db.EventsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsInputList", arg0)
	ret0, _ := ret[0].([]db.EventsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsInputList indicates an expected call of EventsInputList.
func (mr *MockStoreMockRecorder) EventsInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsInputList", reflect.TypeOf((*MockStore)(nil).EventsInputList), arg0)
}

// EventsList mocks base method.
func (m *MockStore) EventsList(arg0 context.Context) ([]db.EventsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsList", arg0)
	ret0, _ := ret[0].([]db.EventsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsList indicates an expected call of EventsList.
func (mr *MockStoreMockRecorder) EventsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsList", reflect.TypeOf((*MockStore)(nil).EventsList), arg0)
}

// NeighbourhoodCreate mocks base method.
func (m *MockStore) NeighbourhoodCreate(arg0 context.Context, arg1 db.NeighbourhoodCreateParams) (db.PlacesSchemaNeighbourhood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighbourhoodCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PlacesSchemaNeighbourhood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighbourhoodCreate indicates an expected call of NeighbourhoodCreate.
func (mr *MockStoreMockRecorder) NeighbourhoodCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighbourhoodCreate", reflect.TypeOf((*MockStore)(nil).NeighbourhoodCreate), arg0, arg1)
}

// NeighbourhoodDeleteRestore mocks base method.
func (m *MockStore) NeighbourhoodDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighbourhoodDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NeighbourhoodDeleteRestore indicates an expected call of NeighbourhoodDeleteRestore.
func (mr *MockStoreMockRecorder) NeighbourhoodDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighbourhoodDeleteRestore", reflect.TypeOf((*MockStore)(nil).NeighbourhoodDeleteRestore), arg0, arg1)
}

// NeighbourhoodFindForUpdate mocks base method.
func (m *MockStore) NeighbourhoodFindForUpdate(arg0 context.Context, arg1 int32) (db.NeighbourhoodFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighbourhoodFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.NeighbourhoodFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighbourhoodFindForUpdate indicates an expected call of NeighbourhoodFindForUpdate.
func (mr *MockStoreMockRecorder) NeighbourhoodFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighbourhoodFindForUpdate", reflect.TypeOf((*MockStore)(nil).NeighbourhoodFindForUpdate), arg0, arg1)
}

// NeighbourhoodUpdate mocks base method.
func (m *MockStore) NeighbourhoodUpdate(arg0 context.Context, arg1 db.NeighbourhoodUpdateParams) (db.PlacesSchemaNeighbourhood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighbourhoodUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PlacesSchemaNeighbourhood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighbourhoodUpdate indicates an expected call of NeighbourhoodUpdate.
func (mr *MockStoreMockRecorder) NeighbourhoodUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighbourhoodUpdate", reflect.TypeOf((*MockStore)(nil).NeighbourhoodUpdate), arg0, arg1)
}

// NeighbourhoodsInputList mocks base method.
func (m *MockStore) NeighbourhoodsInputList(arg0 context.Context, arg1 int32) ([]db.NeighbourhoodsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighbourhoodsInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.NeighbourhoodsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighbourhoodsInputList indicates an expected call of NeighbourhoodsInputList.
func (mr *MockStoreMockRecorder) NeighbourhoodsInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighbourhoodsInputList", reflect.TypeOf((*MockStore)(nil).NeighbourhoodsInputList), arg0, arg1)
}

// NeighbourhoodsList mocks base method.
func (m *MockStore) NeighbourhoodsList(arg0 context.Context) ([]db.NeighbourhoodsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighbourhoodsList", arg0)
	ret0, _ := ret[0].([]db.NeighbourhoodsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighbourhoodsList indicates an expected call of NeighbourhoodsList.
func (mr *MockStoreMockRecorder) NeighbourhoodsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighbourhoodsList", reflect.TypeOf((*MockStore)(nil).NeighbourhoodsList), arg0)
}

// PermissionsList mocks base method.
func (m *MockStore) PermissionsList(arg0 context.Context) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermissionsList", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PermissionsList indicates an expected call of PermissionsList.
func (mr *MockStoreMockRecorder) PermissionsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermissionsList", reflect.TypeOf((*MockStore)(nil).PermissionsList), arg0)
}

// PlacesList mocks base method.
func (m *MockStore) PlacesList(arg0 context.Context) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacesList", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlacesList indicates an expected call of PlacesList.
func (mr *MockStoreMockRecorder) PlacesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacesList", reflect.TypeOf((*MockStore)(nil).PlacesList), arg0)
}

// ProgramCreate mocks base method.
func (m *MockStore) ProgramCreate(arg0 context.Context, arg1 db.ProgramCreateParams) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgramCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProgramCreate indicates an expected call of ProgramCreate.
func (mr *MockStoreMockRecorder) ProgramCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramCreate", reflect.TypeOf((*MockStore)(nil).ProgramCreate), arg0, arg1)
}

// ProgramDeleteRestore mocks base method.
func (m *MockStore) ProgramDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgramDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProgramDeleteRestore indicates an expected call of ProgramDeleteRestore.
func (mr *MockStoreMockRecorder) ProgramDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramDeleteRestore", reflect.TypeOf((*MockStore)(nil).ProgramDeleteRestore), arg0, arg1)
}

// ProgramFindForUpdate mocks base method.
func (m *MockStore) ProgramFindForUpdate(arg0 context.Context, arg1 int32) (db.ProgramFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgramFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.ProgramFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProgramFindForUpdate indicates an expected call of ProgramFindForUpdate.
func (mr *MockStoreMockRecorder) ProgramFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramFindForUpdate", reflect.TypeOf((*MockStore)(nil).ProgramFindForUpdate), arg0, arg1)
}

// ProgramUpdate mocks base method.
func (m *MockStore) ProgramUpdate(arg0 context.Context, arg1 db.ProgramUpdateParams) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgramUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProgramUpdate indicates an expected call of ProgramUpdate.
func (mr *MockStoreMockRecorder) ProgramUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramUpdate", reflect.TypeOf((*MockStore)(nil).ProgramUpdate), arg0, arg1)
}

// ProgramsList mocks base method.
func (m *MockStore) ProgramsList(arg0 context.Context) ([]db.ProgramsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgramsList", arg0)
	ret0, _ := ret[0].([]db.ProgramsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProgramsList indicates an expected call of ProgramsList.
func (mr *MockStoreMockRecorder) ProgramsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramsList", reflect.TypeOf((*MockStore)(nil).ProgramsList), arg0)
}

// ProjectCreate mocks base method.
func (m *MockStore) ProjectCreate(arg0 context.Context, arg1 db.ProjectCreateParams) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockStoreMockRecorder) ProjectCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockStore)(nil).ProjectCreate), arg0, arg1)
}

// ProjectDeleteRestore mocks base method.
func (m *MockStore) ProjectDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDeleteRestore indicates an expected call of ProjectDeleteRestore.
func (mr *MockStoreMockRecorder) ProjectDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDeleteRestore", reflect.TypeOf((*MockStore)(nil).ProjectDeleteRestore), arg0, arg1)
}

// ProjectFindForUpdate mocks base method.
func (m *MockStore) ProjectFindForUpdate(arg0 context.Context, arg1 int32) (db.ProjectFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.ProjectFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectFindForUpdate indicates an expected call of ProjectFindForUpdate.
func (mr *MockStoreMockRecorder) ProjectFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectFindForUpdate", reflect.TypeOf((*MockStore)(nil).ProjectFindForUpdate), arg0, arg1)
}

// ProjectUpdate mocks base method.
func (m *MockStore) ProjectUpdate(arg0 context.Context, arg1 db.ProjectUpdateParams) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUpdate indicates an expected call of ProjectUpdate.
func (mr *MockStoreMockRecorder) ProjectUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdate", reflect.TypeOf((*MockStore)(nil).ProjectUpdate), arg0, arg1)
}

// ProjectsList mocks base method.
func (m *MockStore) ProjectsList(arg0 context.Context) ([]db.ProjectsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsList", arg0)
	ret0, _ := ret[0].([]db.ProjectsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectsList indicates an expected call of ProjectsList.
func (mr *MockStoreMockRecorder) ProjectsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsList", reflect.TypeOf((*MockStore)(nil).ProjectsList), arg0)
}

// RoleCreate mocks base method.
func (m *MockStore) RoleCreate(arg0 context.Context, arg1 db.RoleCreateParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreate indicates an expected call of RoleCreate.
func (mr *MockStoreMockRecorder) RoleCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreate", reflect.TypeOf((*MockStore)(nil).RoleCreate), arg0, arg1)
}

// RoleCreateTX mocks base method.
func (m *MockStore) RoleCreateTX(arg0 context.Context, arg1 db.RoleCreateTXParams) (db.RoleCreateTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreateTX", arg0, arg1)
	ret0, _ := ret[0].(db.RoleCreateTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreateTX indicates an expected call of RoleCreateTX.
func (mr *MockStoreMockRecorder) RoleCreateTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreateTX", reflect.TypeOf((*MockStore)(nil).RoleCreateTX), arg0, arg1)
}

// RoleDeleteRestore mocks base method.
func (m *MockStore) RoleDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleDeleteRestore indicates an expected call of RoleDeleteRestore.
func (mr *MockStoreMockRecorder) RoleDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDeleteRestore", reflect.TypeOf((*MockStore)(nil).RoleDeleteRestore), arg0, arg1)
}

// RoleFindForUpdate mocks base method.
func (m *MockStore) RoleFindForUpdate(arg0 context.Context, arg1 int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleFindForUpdate indicates an expected call of RoleFindForUpdate.
func (mr *MockStoreMockRecorder) RoleFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleFindForUpdate", reflect.TypeOf((*MockStore)(nil).RoleFindForUpdate), arg0, arg1)
}

// RolePermissionsBulkCreate mocks base method.
func (m *MockStore) RolePermissionsBulkCreate(arg0 context.Context, arg1 []db.RolePermissionsBulkCreateParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePermissionsBulkCreate", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolePermissionsBulkCreate indicates an expected call of RolePermissionsBulkCreate.
func (mr *MockStoreMockRecorder) RolePermissionsBulkCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePermissionsBulkCreate", reflect.TypeOf((*MockStore)(nil).RolePermissionsBulkCreate), arg0, arg1)
}

// RolePermissionsClear mocks base method.
func (m *MockStore) RolePermissionsClear(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePermissionsClear", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RolePermissionsClear indicates an expected call of RolePermissionsClear.
func (mr *MockStoreMockRecorder) RolePermissionsClear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePermissionsClear", reflect.TypeOf((*MockStore)(nil).RolePermissionsClear), arg0, arg1)
}

// RoleUpdate mocks base method.
func (m *MockStore) RoleUpdate(arg0 context.Context, arg1 db.RoleUpdateParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUpdate indicates an expected call of RoleUpdate.
func (mr *MockStoreMockRecorder) RoleUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdate", reflect.TypeOf((*MockStore)(nil).RoleUpdate), arg0, arg1)
}

// RoleUpdateTX mocks base method.
func (m *MockStore) RoleUpdateTX(arg0 context.Context, arg1 db.RoleUpdateTXParams) (db.RoleUpdateTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdateTX", arg0, arg1)
	ret0, _ := ret[0].(db.RoleUpdateTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUpdateTX indicates an expected call of RoleUpdateTX.
func (mr *MockStoreMockRecorder) RoleUpdateTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdateTX", reflect.TypeOf((*MockStore)(nil).RoleUpdateTX), arg0, arg1)
}

// RolesInputList mocks base method.
func (m *MockStore) RolesInputList(arg0 context.Context) ([]db.RolesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolesInputList", arg0)
	ret0, _ := ret[0].([]db.RolesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolesInputList indicates an expected call of RolesInputList.
func (mr *MockStoreMockRecorder) RolesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolesInputList", reflect.TypeOf((*MockStore)(nil).RolesInputList), arg0)
}

// RolesList mocks base method.
func (m *MockStore) RolesList(arg0 context.Context) ([]db.RolesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolesList", arg0)
	ret0, _ := ret[0].([]db.RolesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolesList indicates an expected call of RolesList.
func (mr *MockStoreMockRecorder) RolesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolesList", reflect.TypeOf((*MockStore)(nil).RolesList), arg0)
}

// ServiceCreate mocks base method.
func (m *MockStore) ServiceCreate(arg0 context.Context, arg1 db.ServiceCreateParams) (db.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCreate indicates an expected call of ServiceCreate.
func (mr *MockStoreMockRecorder) ServiceCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCreate", reflect.TypeOf((*MockStore)(nil).ServiceCreate), arg0, arg1)
}

// ServiceDeleteRestore mocks base method.
func (m *MockStore) ServiceDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceDeleteRestore indicates an expected call of ServiceDeleteRestore.
func (mr *MockStoreMockRecorder) ServiceDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDeleteRestore", reflect.TypeOf((*MockStore)(nil).ServiceDeleteRestore), arg0, arg1)
}

// ServiceFindForUpdate mocks base method.
func (m *MockStore) ServiceFindForUpdate(arg0 context.Context, arg1 int32) (db.ServiceFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.ServiceFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceFindForUpdate indicates an expected call of ServiceFindForUpdate.
func (mr *MockStoreMockRecorder) ServiceFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceFindForUpdate", reflect.TypeOf((*MockStore)(nil).ServiceFindForUpdate), arg0, arg1)
}

// ServiceUpdate mocks base method.
func (m *MockStore) ServiceUpdate(arg0 context.Context, arg1 db.ServiceUpdateParams) (db.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceUpdate indicates an expected call of ServiceUpdate.
func (mr *MockStoreMockRecorder) ServiceUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUpdate", reflect.TypeOf((*MockStore)(nil).ServiceUpdate), arg0, arg1)
}

// ServicesList mocks base method.
func (m *MockStore) ServicesList(arg0 context.Context) ([]db.ServicesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesList", arg0)
	ret0, _ := ret[0].([]db.ServicesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesList indicates an expected call of ServicesList.
func (mr *MockStoreMockRecorder) ServicesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesList", reflect.TypeOf((*MockStore)(nil).ServicesList), arg0)
}

// SettingsFindForUpdate mocks base method.
func (m *MockStore) SettingsFindForUpdate(arg0 context.Context) ([]db.SettingsFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsFindForUpdate", arg0)
	ret0, _ := ret[0].([]db.SettingsFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingsFindForUpdate indicates an expected call of SettingsFindForUpdate.
func (mr *MockStoreMockRecorder) SettingsFindForUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsFindForUpdate", reflect.TypeOf((*MockStore)(nil).SettingsFindForUpdate), arg0)
}

// SettingsUpdate mocks base method.
func (m *MockStore) SettingsUpdate(arg0 context.Context, arg1 db.SettingsUpdateParams) (db.SettingsUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.SettingsUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingsUpdate indicates an expected call of SettingsUpdate.
func (mr *MockStoreMockRecorder) SettingsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsUpdate", reflect.TypeOf((*MockStore)(nil).SettingsUpdate), arg0, arg1)
}

// TeamMemberCreate mocks base method.
func (m *MockStore) TeamMemberCreate(arg0 context.Context, arg1 db.TeamMemberCreateParams) (db.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamMemberCreate", arg0, arg1)
	ret0, _ := ret[0].(db.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamMemberCreate indicates an expected call of TeamMemberCreate.
func (mr *MockStoreMockRecorder) TeamMemberCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamMemberCreate", reflect.TypeOf((*MockStore)(nil).TeamMemberCreate), arg0, arg1)
}

// TeamMemberDeleteRestore mocks base method.
func (m *MockStore) TeamMemberDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamMemberDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeamMemberDeleteRestore indicates an expected call of TeamMemberDeleteRestore.
func (mr *MockStoreMockRecorder) TeamMemberDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamMemberDeleteRestore", reflect.TypeOf((*MockStore)(nil).TeamMemberDeleteRestore), arg0, arg1)
}

// TeamMemberFindForUpdate mocks base method.
func (m *MockStore) TeamMemberFindForUpdate(arg0 context.Context, arg1 int32) (db.TeamMemberFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamMemberFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TeamMemberFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamMemberFindForUpdate indicates an expected call of TeamMemberFindForUpdate.
func (mr *MockStoreMockRecorder) TeamMemberFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamMemberFindForUpdate", reflect.TypeOf((*MockStore)(nil).TeamMemberFindForUpdate), arg0, arg1)
}

// TeamMemberUpdate mocks base method.
func (m *MockStore) TeamMemberUpdate(arg0 context.Context, arg1 db.TeamMemberUpdateParams) (db.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamMemberUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamMemberUpdate indicates an expected call of TeamMemberUpdate.
func (mr *MockStoreMockRecorder) TeamMemberUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamMemberUpdate", reflect.TypeOf((*MockStore)(nil).TeamMemberUpdate), arg0, arg1)
}

// TeamMembersList mocks base method.
func (m *MockStore) TeamMembersList(arg0 context.Context) ([]db.TeamMembersListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamMembersList", arg0)
	ret0, _ := ret[0].([]db.TeamMembersListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamMembersList indicates an expected call of TeamMembersList.
func (mr *MockStoreMockRecorder) TeamMembersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamMembersList", reflect.TypeOf((*MockStore)(nil).TeamMembersList), arg0)
}

// TestemonialCreate mocks base method.
func (m *MockStore) TestemonialCreate(arg0 context.Context, arg1 db.TestemonialCreateParams) (db.Testemonial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestemonialCreate", arg0, arg1)
	ret0, _ := ret[0].(db.Testemonial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestemonialCreate indicates an expected call of TestemonialCreate.
func (mr *MockStoreMockRecorder) TestemonialCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestemonialCreate", reflect.TypeOf((*MockStore)(nil).TestemonialCreate), arg0, arg1)
}

// TestemonialDeleteRestore mocks base method.
func (m *MockStore) TestemonialDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestemonialDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestemonialDeleteRestore indicates an expected call of TestemonialDeleteRestore.
func (mr *MockStoreMockRecorder) TestemonialDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestemonialDeleteRestore", reflect.TypeOf((*MockStore)(nil).TestemonialDeleteRestore), arg0, arg1)
}

// TestemonialFindForUpdate mocks base method.
func (m *MockStore) TestemonialFindForUpdate(arg0 context.Context, arg1 int32) (db.TestemonialFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestemonialFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TestemonialFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestemonialFindForUpdate indicates an expected call of TestemonialFindForUpdate.
func (mr *MockStoreMockRecorder) TestemonialFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestemonialFindForUpdate", reflect.TypeOf((*MockStore)(nil).TestemonialFindForUpdate), arg0, arg1)
}

// TestemonialUpdate mocks base method.
func (m *MockStore) TestemonialUpdate(arg0 context.Context, arg1 db.TestemonialUpdateParams) (db.Testemonial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestemonialUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Testemonial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestemonialUpdate indicates an expected call of TestemonialUpdate.
func (mr *MockStoreMockRecorder) TestemonialUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestemonialUpdate", reflect.TypeOf((*MockStore)(nil).TestemonialUpdate), arg0, arg1)
}

// TestemonialsList mocks base method.
func (m *MockStore) TestemonialsList(arg0 context.Context) ([]db.TestemonialsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestemonialsList", arg0)
	ret0, _ := ret[0].([]db.TestemonialsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestemonialsList indicates an expected call of TestemonialsList.
func (mr *MockStoreMockRecorder) TestemonialsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestemonialsList", reflect.TypeOf((*MockStore)(nil).TestemonialsList), arg0)
}

// UserCreate mocks base method.
func (m *MockStore) UserCreate(arg0 context.Context, arg1 db.UserCreateParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockStoreMockRecorder) UserCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockStore)(nil).UserCreate), arg0, arg1)
}

// UserCreateTX mocks base method.
func (m *MockStore) UserCreateTX(arg0 context.Context, arg1 db.UserCreateTXParams) (db.UserCreateTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateTX", arg0, arg1)
	ret0, _ := ret[0].(db.UserCreateTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreateTX indicates an expected call of UserCreateTX.
func (mr *MockStoreMockRecorder) UserCreateTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateTX", reflect.TypeOf((*MockStore)(nil).UserCreateTX), arg0, arg1)
}

// UserDeleteRestore mocks base method.
func (m *MockStore) UserDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleteRestore indicates an expected call of UserDeleteRestore.
func (mr *MockStoreMockRecorder) UserDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteRestore", reflect.TypeOf((*MockStore)(nil).UserDeleteRestore), arg0, arg1)
}

// UserFind mocks base method.
func (m *MockStore) UserFind(arg0 context.Context, arg1 int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFind", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFind indicates an expected call of UserFind.
func (mr *MockStoreMockRecorder) UserFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFind", reflect.TypeOf((*MockStore)(nil).UserFind), arg0, arg1)
}

// UserFindByEmailOrCode mocks base method.
func (m *MockStore) UserFindByEmailOrCode(arg0 context.Context, arg1 string) (db.UserFindByEmailOrCodeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindByEmailOrCode", arg0, arg1)
	ret0, _ := ret[0].(db.UserFindByEmailOrCodeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindByEmailOrCode indicates an expected call of UserFindByEmailOrCode.
func (mr *MockStoreMockRecorder) UserFindByEmailOrCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindByEmailOrCode", reflect.TypeOf((*MockStore)(nil).UserFindByEmailOrCode), arg0, arg1)
}

// UserFindForUpdate mocks base method.
func (m *MockStore) UserFindForUpdate(arg0 context.Context, arg1 int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindForUpdate indicates an expected call of UserFindForUpdate.
func (mr *MockStoreMockRecorder) UserFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindForUpdate", reflect.TypeOf((*MockStore)(nil).UserFindForUpdate), arg0, arg1)
}

// UserPermissionsBulkCreate mocks base method.
func (m *MockStore) UserPermissionsBulkCreate(arg0 context.Context, arg1 []db.UserPermissionsBulkCreateParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissionsBulkCreate", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissionsBulkCreate indicates an expected call of UserPermissionsBulkCreate.
func (mr *MockStoreMockRecorder) UserPermissionsBulkCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissionsBulkCreate", reflect.TypeOf((*MockStore)(nil).UserPermissionsBulkCreate), arg0, arg1)
}

// UserPermissionsClear mocks base method.
func (m *MockStore) UserPermissionsClear(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissionsClear", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserPermissionsClear indicates an expected call of UserPermissionsClear.
func (mr *MockStoreMockRecorder) UserPermissionsClear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissionsClear", reflect.TypeOf((*MockStore)(nil).UserPermissionsClear), arg0, arg1)
}

// UserPermissionsList mocks base method.
func (m *MockStore) UserPermissionsList(arg0 context.Context, arg1 interface{}) ([]db.UserPermissionsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissionsList", arg0, arg1)
	ret0, _ := ret[0].([]db.UserPermissionsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissionsList indicates an expected call of UserPermissionsList.
func (mr *MockStoreMockRecorder) UserPermissionsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissionsList", reflect.TypeOf((*MockStore)(nil).UserPermissionsList), arg0, arg1)
}

// UserResetPassword mocks base method.
func (m *MockStore) UserResetPassword(arg0 context.Context, arg1 db.UserResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserResetPassword indicates an expected call of UserResetPassword.
func (mr *MockStoreMockRecorder) UserResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResetPassword", reflect.TypeOf((*MockStore)(nil).UserResetPassword), arg0, arg1)
}

// UserRolesBulkCreate mocks base method.
func (m *MockStore) UserRolesBulkCreate(arg0 context.Context, arg1 []db.UserRolesBulkCreateParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRolesBulkCreate", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRolesBulkCreate indicates an expected call of UserRolesBulkCreate.
func (mr *MockStoreMockRecorder) UserRolesBulkCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRolesBulkCreate", reflect.TypeOf((*MockStore)(nil).UserRolesBulkCreate), arg0, arg1)
}

// UserRolesClear mocks base method.
func (m *MockStore) UserRolesClear(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRolesClear", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRolesClear indicates an expected call of UserRolesClear.
func (mr *MockStoreMockRecorder) UserRolesClear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRolesClear", reflect.TypeOf((*MockStore)(nil).UserRolesClear), arg0, arg1)
}

// UserUpdate mocks base method.
func (m *MockStore) UserUpdate(arg0 context.Context, arg1 db.UserUpdateParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockStoreMockRecorder) UserUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockStore)(nil).UserUpdate), arg0, arg1)
}

// UserUpdateTX mocks base method.
func (m *MockStore) UserUpdateTX(arg0 context.Context, arg1 db.UserUpdateTXParams) (db.UserUpdateTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateTX", arg0, arg1)
	ret0, _ := ret[0].(db.UserUpdateTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdateTX indicates an expected call of UserUpdateTX.
func (mr *MockStoreMockRecorder) UserUpdateTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateTX", reflect.TypeOf((*MockStore)(nil).UserUpdateTX), arg0, arg1)
}

// UsersList mocks base method.
func (m *MockStore) UsersList(arg0 context.Context) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersList", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersList indicates an expected call of UsersList.
func (mr *MockStoreMockRecorder) UsersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersList", reflect.TypeOf((*MockStore)(nil).UsersList), arg0)
}
